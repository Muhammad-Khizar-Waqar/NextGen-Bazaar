// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?
  name          String?
  role          Role      @default(USER)
  avatar        String?   // Cloudinary URL
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  reviews       Review[]
  wishlist      Wishlist?
  cart          Cart?
}

enum Role {
  USER
  ADMIN
}

model Product {
  id                String           @id @default(uuid())
  name              String
  description       String
  price             Float
  images            String[]         // Cloudinary URLs
  categoryId        String
  category          Category         @relation(fields: [categoryId], references: [id])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  variants          ProductVariant[]
  reviews           Review[]
  orderItems        OrderItem[]
  wishlistItems     WishlistItem[]
  cartItems         CartItem[]
}

model ProductVariant {
  id                 String   @id @default(uuid())
  productId          String
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  size               String?
  color              String?
  material           String?
  sku                String   @unique
  inventoryQuantity  Int      @default(0)
  lowStockThreshold  Int      @default(5)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  orderItems         OrderItem[]
  cartItems          CartItem[]
  inventoryLogs      InventoryLog[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  image       String?   // Cloudinary URL
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  total           Float
  shippingAddress String
  paymentIntentId String?     // Stripe payment intent ID
  trackingNumber  String?
  carrier         String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model OrderItem {
  id               String          @id @default(uuid())
  orderId          String
  order            Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId        String
  product          Product         @relation(fields: [productId], references: [id])
  variantId        String?
  variant          ProductVariant? @relation(fields: [variantId], references: [id])
  quantity         Int
  price            Float
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id         String          @id @default(uuid())
  cartId     String
  cart       Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId  String
  product    Product         @relation(fields: [productId], references: [id])
  variantId  String?
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  quantity   Int
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Wishlist {
  id        String         @id @default(uuid())
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InventoryLog {
  id               String         @id @default(uuid())
  variantId        String
  variant          ProductVariant @relation(fields: [variantId], references: [id])
  previousQuantity Int
  newQuantity      Int
  changeReason     String
  changedBy        String         // User ID or system
  createdAt        DateTime       @default(now())
}